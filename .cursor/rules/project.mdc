---
description: 
globs: 
alwaysApply: true
---
# Project Overview
- Built with Python 3.9+
- Uses Poetry for dependency management
- Uses CircleCI CI/CD for continuous integration and deployment

# Code Structure
├── CHANGELOG.md - changelog for the project.
├── dist - distribution files for the package.
├── documentation - documentation files for thing that do not fit into the top level README.md.
├── LICENSE - license file for the project.
├── poetry.lock - Poetry lock file for dependency management.
├── poetry.toml - Poetry configuration file.
├── pyproject.toml - Poetry project configuration file.
├── README.md - main README file for the project.
├── reports - generated reports and documentation.
├── src - source code of the project.
└── tests - automated testing suite that uses pytest.
    ├── integration - integration tests.
    └── unit - unit tests.

# Coding Conventions
1. Use Pydantic models for data validation and serialization
2. Follow type hints throughout the codebase
3. Use async/await for asynchronous operations
4. Use dependency injection where appropriate

# Logging
1. Use Python's built-in logging module for structured logging. Create a logger in each module as `logger = logging.getLogger(__name__)`.
2. Use the following logging levels:
   - `DEBUG` for detailed debugging information, not to be used in production.
   - `INFO` for general operational messages. Should not be logged more than once per second.
   - `WARNING` for fixable issues and possible data inconsistencies that do not stop the application.
   - `ERROR` for errors and clear data inconsistencies that require attention, but do not stop the application.
   - `CRITICAL` for critical errors that stop the application. Must be logged into Sentry as well.
3. Log messages with appropriate context information, such as request IDs, and operation details.

# Documentation
1. Keep README.md up to date
2. Document changes in CHANGELOG.md in the "Unreleased" section.

# Development Workflow
1. Use `poetry run <COMMAND>` to run commands in the virtual environment
2. Use `delfino verify` for linting and formatting
3. Write comprehensive tests for new features
4. Use .cursor/rules/releases.mdc for instructions on making a release.